.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "RRDBUILD 1"
.TH RRDBUILD 1 "2012-01-24" "1.4.7" "rrdtool"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
rrdbuild \- Instructions for building RRDtool
.SH "OVERVIEW"
.IX Header "OVERVIEW"
If you downloaded the source of RRDtool you have to compile it. This
document will give some information on how this is done.
.PP
RRDtool relies on services of third part libraries. Some of these libraries
may already be installed on your system. You have to compile copies of the other
ones before you can build RRDtool.
.PP
This document will tell you about all the necessary steps to get going.
.PP
These instructions assume you are using a \fBbash\fR shell. If you use csh/tcsh,
then you can either type \fIbash\fR to switch to bash for the compilation or if
you know what you are doing just replace the export bits with
setenv.
.PP
We further assume that your copies of \fBtar\fR and \fBmake\fR are actually \fB\s-1GNU\s0
tar\fR and \fB\s-1GNU\s0 make\fR respectively. It could be that they are installed as
\&\fBgtar\fR and \fBgmake\fR on your system.
.SH "OPTIMISTIC BUILD"
.IX Header "OPTIMISTIC BUILD"
Before you start to build RRDtool, you have to decide two things:
.IP "1." 4
In which directory you want to build the software.
.IP "2." 4
Where you want to install the software.
.PP
Once you have decided. Save the two locations into environment variables.
.PP
.Vb 2
\& BUILD_DIR=/tmp/rrdbuild
\& INSTALL_DIR=/opt/rrdtool\-1.4.7
.Ve
.PP
If your \fI/tmp\fR is mounted with the option noexec (\s-1RHEL\s0 seems todo that) you have to choose
a different directory!
.PP
Now make sure the \s-1BUILD_DIR\s0 exists and go there:
.PP
.Vb 2
\& mkdir \-p $BUILD_DIR
\& cd $BUILD_DIR
.Ve
.PP
Lets first assume you already have all the necessary libraries
pre-installed.
.PP
.Vb 4
\& wget http://oss.oetiker.ch/rrdtool/pub/rrdtool\-1.4.7.tar.gz
\& gunzip \-c rrdtool\-1.4.7.tar.gz | tar xf \-
\& cd rrdtool\-1.4.7
\& ./configure \-\-prefix=$INSTALL_DIR && make && make install
.Ve
.PP
Ok, this was very optimistic. This try will probably have ended with
\&\fBconfigure\fR complaining about several missing libraries.
.SH "INSTALLING DEPENDENCIES"
.IX Header "INSTALLING DEPENDENCIES"
If your \s-1OS\s0 lets you install additional packages from a software repository,
you may get away with installing the missing packages. When the packages are
installed, run configure again and try to compile again. Below you find some
hints on getting your \s-1OS\s0 ready for compiling RRDtool.
.PP
Additions to this list are welcome. In general RRDtool should work with the
latest versions of the libraries. The versions listed here are just what was
current when I tested this.
.SS "OpenSolaris 2008.05"
.IX Subsection "OpenSolaris 2008.05"
Just add a compiler and the gnome development package:
.PP
.Vb 2
\& pkg install sunstudioexpress
\& pkg install SUNWgnome\-common\-devel
.Ve
.PP
There is a problem with \fIcairo.pc\fR on OpenSolaris. It suggests that
xrender is required for compilation with cairo. This is not true and also
bad since OpenSolaris does not include an \fIxrender.pc\fR file. Use Perl to
fix this:
.PP
.Vb 1
\& perl \-i~ \-p \-e \*(Aqs/(Requires.*?)\es*xrender.*/$1/\*(Aq /usr/lib/pkgconfig/cairo.pc
.Ve
.PP
Make sure the RRDtool build system finds your new compiler
.PP
.Vb 1
\& export PATH=/opt/SunStudioExpress/bin
.Ve
.SS "Debian / Ubuntu"
.IX Subsection "Debian / Ubuntu"
Use apt-get to make sure you have all that is required. A number
of packages will get added through dependencies.
.PP
.Vb 1
\& apt\-get install libpango1.0\-dev libxml2\-dev
.Ve
.SS "Gentoo"
.IX Subsection "Gentoo"
In Gentoo installing RRDtool is really simple you just need to \fBemerge
rrdtool\fR. All dependencies will be handled automatically by the portage
system. The only thing you should care about are \s-1USE\s0 flags, which allow you
fine tune features RRDtool will be built with. Currently the following \s-1USE\s0
flags are available:
.PP
.Vb 7
\& doc    \- install .html and .txt documentation
\&          into /usr/share/doc/rrdtool\-1.x.xx/
\& perl   \- build and install perl language bindings
\& python \- build and install python language bindings
\& ruby   \- build and install ruby language bindings
\& tcl    \- build and install tcl language bindings
\& rrdcgi \- build and install rrdcgi
.Ve
.PP
After you've decided which \s-1USE\s0 flags you need, set them either in
\&\fImake.conf\fR or \fI/etc/portage/package.use\fR and finally run:
.PP
.Vb 1
\& # emerge \-va rrdtool
.Ve
.PP
Take a look at Gentoo handbook for further details on how to manage \s-1USE\s0
flags: http://www.gentoo.org/doc/en/handbook/handbook\-x86.xml?part=2
.SH "BUILDING DEPENDENCIES"
.IX Header "BUILDING DEPENDENCIES"
But again this may have been too optimistic still, and you actually have to
compile your own copies of some of the required libraries. Things like
libpng and zlib are pretty standard so you will probably have them on your
system anyway. Freetype, Fontinst, Cairo, Pango may be installed, but it is
possible that they are pretty old and thus don't live up to our
expectations, so you may want to compile their latest versions.
.SS "General build tips for \s-1AIX\s0"
.IX Subsection "General build tips for AIX"
If you are working with \s-1AIX\s0, you may find the \fB\-\-disable\-shared\fR option
will cause things to break for you. In that case you may have to install the
shared libraries into the RRDtool \s-1PREFIX\s0 and work with \fB\-\-disable\-static\fR
instead.
.PP
Another hint to get RRDtool working on \s-1AIX\s0 is to use the \s-1IBM\s0 \s-1XL\s0 C Compiler:
.PP
.Vb 2
\& export CC=/usr/vac/bin/cc
\& export PERLCC=$CC
.Ve
.PP
(Better instructions for \s-1AIX\s0 welcome!)
.SS "Build Instructions"
.IX Subsection "Build Instructions"
Some libraries want to know where other libraries are. For this to work,
set the following environment variable
.PP
.Vb 2
\& export PKG_CONFIG_PATH=${INSTALL_DIR}/lib/pkgconfig
\& export PATH=$INSTALL_DIR/bin:$PATH
.Ve
.PP
The above relies on the presence of the \fIpkgconfig\fR program. Below you find instructions
on how to compile pkgconfig.
.PP
Since we are compiling libraries dynamically, they must know where to find
each other. This is done by setting an appropriate \s-1LDFLAGS\s0. Unfortunately,
the syntax again differs from system to system:
.IP "Solaris" 4
.IX Item "Solaris"
.Vb 1
\& export LDFLAGS=\-R${INSTALL_DIR}/lib
.Ve
.Sp
if you are using the Sun Studio/Forte compiler, you may also want to set
.Sp
.Vb 2
\& CFLAGS="\-xO3 \-xcode=pic13"   (SPARC)
\& CFLAGS="\-xO3 \-Kpic"          (x86)
.Ve
.IP "Linux" 4
.IX Item "Linux"
.Vb 1
\& export LDFLAGS="\-Wl,\-\-rpath \-Wl,${INSTALL_DIR}/lib"
.Ve
.IP "\s-1HPUX\s0" 4
.IX Item "HPUX"
.Vb 1
\& export LDFLAGS="+b${INSTALL_DIR}/lib"
.Ve
.IP "\s-1AIX\s0" 4
.IX Item "AIX"
.Vb 1
\& export LDFLAGS="\-Wl,\-blibpath:${INSTALL_DIR}/lib"
.Ve
.PP
If you have \s-1GNU\s0 make installed and it is not called 'make',
then do
.PP
.Vb 2
\& export MAKE=gmake
\& export GNUMAKE=gmake
.Ve
.PP
otherwise just do
.PP
.Vb 1
\& export MAKE=make
.Ve
.PP
\fIBuilding pkgconfig\fR
.IX Subsection "Building pkgconfig"
.PP
As mentioned above, without pkgconfig the whole build process will be lots
of pain and suffering, so make sure you have a copy on your system. If it is
not available natively, here is how to compile it.
.PP
.Vb 6
\& wget http://pkgconfig.freedesktop.org/releases/pkg\-config\-0.23.tar.gz
\& gunzip \-c pkg\-config\-0.23.tar.gz | tar xf \-
\& cd pkg\-config\-0.23
\& ./configure \-\-prefix=$INSTALL_DIR CFLAGS="\-O3 \-fPIC"
\& $MAKE
\& $MAKE install
.Ve
.PP
After installing pkgconfig in a custom directory, setting up the corresponding
environment variable will be helpful.
.PP
.Vb 1
\& export PKG_CONFIG=$INSTALL_DIR/bin/pkg\-config
.Ve
.PP
\fIBuilding zlib\fR
.IX Subsection "Building zlib"
.PP
Chances are very high that you already have that on your system ...
.PP
.Vb 7
\& cd $BUILD_DIR
\& wget http://oss.oetiker.ch/rrdtool/pub/libs/zlib\-1.2.3.tar.gz
\& gunzip \-c zlib\-1.2.3.tar.gz | tar xf \-
\& cd zlib\-1.2.3
\& ./configure \-\-prefix=$INSTALL_DIR CFLAGS="\-O3 \-fPIC" \-\-shared
\& $MAKE
\& $MAKE install
.Ve
.PP
\fIBuilding libpng\fR
.IX Subsection "Building libpng"
.PP
Libpng itself requires zlib to build, so we need to help a bit. If you
already have a copy of zlib on your system (which is very likely) you can
drop the settings of \s-1LDFLAGS\s0 and \s-1CPPFLAGS\s0. Note that the backslash (\e) at
the end of line 4 means that line 4 and line 5 are on one line.
.PP
.Vb 7
\& cd $BUILD_DIR
\& wget http://oss.oetiker.ch/rrdtool/pub/libs/libpng\-1.2.18.tar.gz
\& gunzip \-c libpng\-1.2.18.tar.gz | tar xf \-
\& cd libpng\-1.2.10
\& env CFLAGS="\-O3 \-fPIC" ./configure \-\-prefix=$INSTALL_DIR
\& $MAKE
\& $MAKE install
.Ve
.PP
\fIBuilding freetype\fR
.IX Subsection "Building freetype"
.PP
.Vb 7
\& cd $BUILD_DIR
\& wget http://oss.oetiker.ch/rrdtool/pub/libs/freetype\-2.3.5.tar.gz
\& gunzip \-c freetype\-2.3.5.tar.gz | tar xf \-
\& cd freetype\-2.3.5
\& ./configure \-\-prefix=$INSTALL_DIR CFLAGS="\-O3 \-fPIC"
\& $MAKE
\& $MAKE install
.Ve
.PP
If you run into problems building freetype on Solaris, you may want to try to
add the following at the start the configure line:
.PP
.Vb 1
\& env EGREP=egrep
.Ve
.PP
\fIBuilding LibXML2\fR
.IX Subsection "Building LibXML2"
.PP
.Vb 7
\& cd $BUILD_DIR
\& wget http://oss.oetiker.ch/rrdtool/pub/libs/libxml2\-2.6.32.tar.gz
\& gunzip \-c libxml2\-2.6.32.tar.gz | tar xf \-
\& cd libxml2\-2.6.32
\& ./configure \-\-prefix=$INSTALL_DIR CFLAGS="\-O3 \-fPIC"
\& $MAKE
\& $MAKE install
.Ve
.PP
\fIBuilding fontconfig\fR
.IX Subsection "Building fontconfig"
.PP
Note that fontconfig has a run time configuration file in INSTALL_DIR/etc you
may want to adjust that so that fontconfig finds the fonts on your system.
Run the fc-cache program to build the fontconfig cache after changing the
config file.
.PP
.Vb 7
\& cd $BUILD_DIR
\& wget http://oss.oetiker.ch/rrdtool/pub/libs/fontconfig\-2.4.2.tar.gz
\& gunzip \-c fontconfig\-2.4.2.tar.gz   | tar xf \-
\& cd fontconfig\-2.4.2
\& ./configure \-\-prefix=$INSTALL_DIR CFLAGS="\-O3 \-fPIC" \-\-with\-freetype\-config=$INSTALL_DIR/bin/freetype\-config
\& $MAKE
\& $MAKE install
.Ve
.PP
\fIBuilding Pixman\fR
.IX Subsection "Building Pixman"
.PP
.Vb 7
\& cd $BUILD_DIR
\& wget http://oss.oetiker.ch/rrdtool/pub/libs/pixman\-0.10.0.tar.gz
\& gunzip \-c pixman\-0.10.0.tar.gz  | tar xf \-
\& cd pixman\-0.10.0
\& ./configure \-\-prefix=$INSTALL_DIR CFLAGS="\-O3 \-fPIC"
\& $MAKE
\& $MAKE install
.Ve
.PP
\fIBuilding Cairo\fR
.IX Subsection "Building Cairo"
.PP
.Vb 11
\& cd $BUILD_DIR
\& wget http://oss.oetiker.ch/rrdtool/pub/libs/cairo\-1.6.4.tar.gz
\& gunzip \-c cairo\-1.6.4.tar.gz   | tar xf \-
\& cd cairo\-1.6.4
\& ./configure \-\-prefix=$INSTALL_DIR \e
\&    \-\-enable\-xlib=no \e
\&    \-\-enable\-xlib\-render=no \e
\&    \-\-enable\-win32=no \e
\&    CFLAGS="\-O3 \-fPIC"
\& $MAKE
\& $MAKE install
.Ve
.PP
When building on Solaris you may want todo
.PP
.Vb 5
\& ./configure \-\-prefix=$INSTALL_DIR \e
\&    \-\-enable\-xlib=no \e
\&    \-\-enable\-xlib\-render=no \e
\&    \-\-enable\-win32=no \e
\&    CFLAGS="\-O3 \-fPIC \-D_POSIX_PTHREAD_SEMANTICS"
.Ve
.PP
\fIBuilding Glib\fR
.IX Subsection "Building Glib"
.PP
.Vb 7
\& cd $BUILD_DIR
\& wget http://oss.oetiker.ch/rrdtool/pub/libs/glib\-2.15.4.tar.gz
\& gunzip \-c glib\-2.15.4.tar.gz  | tar xf \-
\& cd glib\-2.15.4
\& ./configure \-\-prefix=$INSTALL_DIR CFLAGS="\-O3 \-fPIC"
\& $MAKE
\& $MAKE install
.Ve
.PP
\fIBuilding Pango\fR
.IX Subsection "Building Pango"
.PP
.Vb 7
\& cd $BUILD_DIR
\& wget http://oss.oetiker.ch/rrdtool/pub/libs/pango\-1.21.1.tar.bz2
\& bunzip2 \-c pango\-1.21.1.tar.bz2 | tar xf \-
\& cd pango\-1.21.1
\& ./configure \-\-prefix=$INSTALL_DIR CFLAGS="\-O3 \-fPIC" \-\-without\-x
\& $MAKE
\& $MAKE install
.Ve
.SS "Building rrdtool (second try)"
.IX Subsection "Building rrdtool (second try)"
Now all the dependent libraries are built and you can try again. This time
you tell configure where it should be looking for libraries and include
files. This is done via environment variables. Depending on the shell you
are running, the syntax for setting environment variables is different.
.PP
And finally try building again. We disable the python and tcl bindings
because it seems that a fair number of people have ill configured python and
tcl setups that would prevent RRDtool from building if they are included in
their current state.
.PP
.Vb 5
\& cd $BUILD_DIR/rrdtool\-1.4.7
\& ./configure \-\-prefix=$INSTALL_DIR \-\-disable\-tcl \-\-disable\-python
\& $MAKE clean
\& $MAKE
\& $MAKE install
.Ve
.PP
\&\s-1SOLARIS\s0 \s-1HINT:\s0 if you want to build  the Perl module for the native Perl (the
one shipping with Solaris) you will need the Sun Forte compiler installed on
your box or you have to hand-tune bindings/perl\-shared/Makefile while
building!
.PP
Now go to \fI\f(CI$INSTALL_DIR\fI\fR\fB/share/rrdtool/examples/\fR and run them to see if
your build has been successful.
.SH "AUTHOR"
.IX Header "AUTHOR"
Tobias Oetiker <tobi@oetiker.ch>
